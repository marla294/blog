Known Issues

I don't have a bug tracking system right now, so... ¯\_(ツ)_/¯
These issues will eventually be tracked in Github, but for now, this is my working list.

Severity: 0 = Showstopper, 1 = Bad, 2 = Eh, 3 = Won't Fix

----------------- OPEN ------------------
----------------- Bug
Title: 11/29/17 - Add 404 page to router

Severity: 2

----------------- CR
Title: 11/30/17 - Add same router animation used on router to the "show more" functionality

Severity: 2

Steps to reproduce:
* Click the "Show More..." link
* Note the animation occurs instantly, instead of having the same smooth transition that the router does.  It would just look a whole lot more graceful if it worked the same way as the router.

Possible solution:
* Now that I got animations to work, thanks to Angular CLI (yay), go back through the Angular animations cookbook in the docs

----------------- CR
Title: 11/30/17 - Links on the home page have scroll cursor instead of hand (web only)

Severity: 2

Steps to reproduce:
* Hover over one of the links on the home component on the web.
* Note that the cursor is a scroll, not the "link" hand.  I want to change it to the link hand.

Cause:
* Angular Material is probably overwriting the link CSS with the list item CSS.

Possible solution:
* CSS, baby.

----------------- CR
Title: 11/30/17 - You can click the links alllll the way over on the right side of the home page (web only)

Severity: 2

Steps to reproduce:
* Go to Home page
* Go wayyyy to the right of the link list but still vertically over a link and still on the page
* Click - it still takes you to a link.  Not a big deal but it's just weird, operationally.

Cause:
* List items taking up the whole darn screen.
* Also this spawns another idea - make hovering over the links do an animation to show you when you are hovering

Possible solution:
* Make the list items less wide.  And, CSS, baby. ;)
* Entered another CR for having an animation when hovering over links

----------------- CR
Title: 11/30/17 - Make little animation when you are hovering over the links

Severity: 1

Steps to reproduce:
* Go to Home page
* Hover over a link
* Nothing at all happens.
* The reason I put this as a 1 is that it would make the blog easier and more intuitive to use if the links showed when you are hovering over them.

Cause:
* I don't have a :hover on links in my CSS yet

Possible solution:
* Add a :hover on links in my CSS
* Might want to add a transition to that as well, same as the router

----------------- Bug
Title: 12/01/17 - Animations not working on Safari on my iPhone

Severity: 1

Steps to reproduce:
* Browse to website on iPhone
* Click on a link - note that it comes up instantly, instead of doing the transition animation

Possible solution:
* ¯\_(ツ)_/¯
* Maybe it is browser specific and not device specific.  I'll have to try it on Safari on my computer to find out.


----------------- FIXED -----------------
----------------- Bug
Title: 11/28/17 - If you navigate to a post page and refresh, the page won't render properly, and navigating around the site is just screwed up until you refresh the home page.

Severity: 1

Steps to reproduce:
* From home page, click on one of the posts, so you get to a page like /post/1
* Refresh browser
* Page doesn't render.  Only thing that fixes is to go back to the home page and refresh

Cause: 
* I believe that the cause is the async loading of the JSON into the POSTS array.  The post component needs to load that array before the page can render.  But the subscription has to happen first too.  I can't figure out how to subscribe, and then tell http to process the subscription again before the page loads.  The only thing I've gotten to sorta work (which is janky) is to have the loadPosts() function be called from the template.

Possible solution:
* The most promising idea seems to be looking into route guards, so that the user can't navigate to a post without going to the home page first.
* The other idea is trying to figure out how to do a .then() type thing on the http subscription.

SOLUTION: 11/29/17
* The service was subscribing to one of the observables that it was returning.  In retrospect, that was a bit silly of me.  It kind of defeats the point of using Observables if you're just going to subscribe to them right in the place where you get them.  I changed the service to only return Observables out of the functions.  Then I changed the components that use the service to subscribe to the returned Observables themselves and use them where they want them.